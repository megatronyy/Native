/*
	树的专业定义：
	1、有且只有一个称为根的节点。
	2、有若干个互不相干的子树，这些子树本身也是一棵树。

	通俗的定义：
	1、树是由节点和边组成
	2、每个节点只能有一个父节点但可以有多个子节点
	3、但有一个节点除外，该节点没有父节点，此节点称为父节点

	专业术语：
		节点：父节点  子节点
		子孙： 堂兄弟
		深度：
			从根节点到最底层节点的层数称之为深度
			根节点是第一层
		叶子节点：
			没有子节点的节点
		非终端节点：
			实际就是非叶子节点
		度：
			子节点的个数称为度

	树的分类：
		一般树：任意一个节点的子节点都不受限制
		二叉树：任意一个节点的子节点个数最多两个，且子节点的位置不可更改（左右不可互换）
				分类：
					一般二叉树
					满二叉树:在不增加树的层数的前提下，无法再多添加一个节点的二叉树就是满二叉树
					完全二叉树：如果只是删除满二叉最底层最右边的连续若干个节点，这样形成的二叉树就是完全二叉树
		森林：N个互不相交的树的集合

	树的存储：
		1、二叉树的存储
			连续存储：【必须转换成完全二叉树，才能用连续存储】
				优点：
					查找某个节点的父节点和子节点（也包括判断有没有子代）
				据点：
					耗用内存空间过大
			链式存储

		2、一般树的存储
			双亲表示法：
				结构体
				数据域：保存节点数据
				下标域：保存父节点下标
				此结构体构成一个数组
			孩子表示法：
				结构体
				数据域：保存节点数据
				指针链表域：指向子节点的链表
				此结构体构成一个数组
			双亲孩子表示法:
				结构体
				数据域：保存节点数据
				下标域：保存父节点下标
				指针链表域：指向子节点的链表
				优点：求父子节点都方便
				此结构体构成一个数组
			二叉树表示法：
				又叫兄弟孩子表示法
				把一普通树转换成二叉树来存储
				具体转换方法：
					节点
					左指针域：指向第一个孩子
					右指针域：指向它的第一个兄弟
				只要能满足上面的方法，就能把一普通树转换成二叉树
		3、森林的存储
			几棵普通的树就组成一个森林，这样的数据存储，用到了兄弟孩子表示法
			把第一棵树的第一个节点做为主节点，然后就用兄弟表示法来转换。
	二叉树的操作
		遍历
			先序遍历[先访问根节点]
				先访问根节点
				再先序访问左子树
				当没有左子树的时候，再先序访问右子树
			中序遍历[中间访问根节点]
				中序遍历左子树
				再访问根节点,根下的两个子节点先访问，先左后右
				再中序遍历右子树
			后序遍历[最后访问根节点]
		已知两种遍历序列求原始二叉树
			已知道一棵树的先、中、后任何一种序列，都不能还原出原始的二叉树
			已知道两种序列（除先与后的组合）都能还原出原始二叉树

*/
#pragma once
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>